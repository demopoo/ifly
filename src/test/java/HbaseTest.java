import com.google.protobuf.ServiceException;import com.iflytek.ApplicationStart;import com.iflytek.util.ConfigUtils;import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.hbase.*;import org.apache.hadoop.hbase.client.*;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.hadoop.hbase.HbaseTemplate;import org.springframework.data.hadoop.hbase.RowMapper;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.context.web.WebAppConfiguration;import java.io.IOException;import java.util.HashMap;import java.util.List;import java.util.Map;/** * @author: demopoo * @Date: Created in 上午10:14 2018/4/19 * @Des: * @Modifyed By: */@SpringBootTest(classes = ApplicationStart.class)@RunWith(SpringJUnit4ClassRunner.class)@WebAppConfigurationpublic class HbaseTest {    @Autowired    public HbaseTemplate hbaseTemplate;    @Autowired    public ConfigUtils configUtils;    @Test    public void testCreateTable() {        String strTableName = "t_student";        //列簇        String[] familys = {"grade", "course"};        //创建一个t_student表，共两列，一列是grade,一列是course        createTable(strTableName, familys);    }    /**     * 创建表     *     * @param tableName 表名     * @param families  列簇     */    public void createTable(String tableName, String... families) {        HTableDescriptor tableDescriptor = new HTableDescriptor(TableName.valueOf(tableName));        try {            Connection connection = ConnectionFactory.createConnection(this.hbaseTemplate.getConfiguration());            Admin admin = connection.getAdmin();            for (String family : families) {                tableDescriptor.addFamily(new HColumnDescriptor(family));            }            if (admin.tableExists(TableName.valueOf(tableName))) {                System.out.println("Table Exists");                System.exit(0);            } else {                admin.createTable(tableDescriptor);                System.out.println("Create table Success!!!Table Name:[" + tableName + "]");            }        } catch (IOException e) {            e.printStackTrace();        }    }    @Test    public void addData() throws IOException, ServiceException {        Configuration conf = HBaseConfiguration.create();        conf.set("hbase.master", "192.168.248.145:16000");        conf.set("hbase.zookeeper.quorum", "192.168.248.145,192.168.248.140,192.168.248.146");        conf.set("hbase.zookeeper.property.clientPort", "2181");        HBaseAdmin.checkHBaseAvailable(conf);        //boolean bool = admin.tableExists("student");//        System.out.println(bool);        Student stu = new Student();        stu.setStudent_age(99);        stu.setStudent_name("demopooooooooooooooo");        // this.hbaseTemplate.put("t_student","1111111","data","IFLY",stu.toString().getBytes());        //为t_student的course列设置值为English        this.hbaseTemplate.put("t_student", "sunyu", "course", "IFLY", "English".getBytes());    }    /**     * 扫描t_student中的数据     */    @Test    public void testGetData() {        this.hbaseTemplate.find("t_student", new Scan(), new RowMapper<Map<String, Object>>() {            public Map<String, Object> mapRow(Result result, int rowNum) throws Exception {                List<Cell> ceList = result.listCells();                Map<String, Object> map = new HashMap<>();                if (ceList != null && ceList.size() > 0) {                    for (Cell cell : ceList) {                        System.out.println(new String(CellUtil.cloneRow(cell)) + "\t" + new String(CellUtil.cloneFamily(cell))                                + "\t" + new String(CellUtil.cloneQualifier(cell)) + "\t"                                + new String(CellUtil.cloneValue(cell)) + "\t" + cell.getTimestamp());                    }                }                return map;            }        });    }    @Test    public void staticConfig() {        String result = configUtils.getUrl("app_id");        System.out.println(result);    }}